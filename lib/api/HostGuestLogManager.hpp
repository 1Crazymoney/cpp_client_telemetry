// Copyright (c) Microsoft. All rights reserved.

#pragma once
#include "Version.hpp"
#include "Enums.hpp"
#include "ILogManager.hpp"
#include "ILogController.hpp"
#include "Logger.hpp"
#include "ContextFieldsProvider.hpp"
#include "ISemanticContext.hpp"
#include "api/LogConfiguration.hpp"
#include <string>
#include <mutex>

// *INDENT-OFF*
namespace Microsoft { namespace Applications { namespace Telemetry {
// *INDENT-ON*


/// <summary>
/// This class is used to manage the Telemetry logging system
/// </summary>
class HostGuestLogManager : public ILogManager
{
  public:

    HostGuestLogManager(LogConfiguration* config, bool wantController);
    HostGuestLogManager(bool wantController);
    /// <summary>
    /// Destroy the telemetry logging system instance. Calls `FlushAndTeardown()` implicitly.
    /// </summary>
    virtual ~HostGuestLogManager();

    /// <summary>
    /// Retrieve an ISemanticContext interface through which to specify context information
    /// such as device, system, hardware and user information.
    /// Context information set via this API will apply to all logger instance unless they
    /// are overwritten by individual logger instance.
    /// </summary>
    /// <returns>ISemanticContext interface pointer</returns>
    virtual ISemanticContext& GetSemanticContext();

    /// <summary>
    /// Adds or s a property of the custom context for the telemetry logging system.
    /// Context information set here applies to events generated by all ILogger instances
    /// unless it is overwritten on a particular ILogger instance.
    /// </summary>
    /// <param name="name">Name of the context property</param>
    /// <param name="value">String value of the context property</param>
    /// <param name='piiKind'>PIIKind of the context with PiiKind_None as the default</param>
    virtual ACTStatus SetContext(std::string const& name, std::string const& value, PiiKind piiKind = PiiKind_None);

	/// <summary>
	/// Adds or s a property of the custom context for the telemetry logging system.
	/// Context information set here applies to events generated by all ILogger instances 
	/// unless it is overwritten on a particular ILogger instance.
	/// </summary>
	/// <param name="name">Name of the context property</param>
	/// <param name="value">Value of the context property</param>
	/// <param name='piiKind'>PIIKind of the context with PiiKind_None as the default</param>
	virtual ACTStatus SetContext(const std::string& name, const char *value, PiiKind piiKind = PiiKind_None) { const std::string val(value); return SetContext(name, val, piiKind); };

	/// <summary>
	/// Adds or s a property of the global context.
	/// </summary>
	/// <param name="name">Name of the property</param>
	/// <param name="value">Double value of the property</param>
	virtual ACTStatus  SetContext(const std::string& name, double value, PiiKind piiKind = PiiKind_None) ;

	/// <summary>
	/// Adds or s a property of the global context.
	/// </summary>
	/// <param name="name">Name of the property</param>
	/// <param name="value">64-bit Integer value of the property</param>
	virtual ACTStatus  SetContext(const std::string& name, int64_t value, PiiKind piiKind = PiiKind_None);;

	/// <summary>
	/// Adds or s a property of the global context.<br>
	/// All integer types other than int64_t are currently being converted to int64_t
	/// </summary>
	/// <param name="name">Name of the property</param>
	/// <param name="value">8-bit Integer value of the property</param>
	virtual ACTStatus SetContext(const std::string& name, int8_t  value, PiiKind piiKind = PiiKind_None) { return SetContext(name, (int64_t)value, piiKind); }

	/// <summary>
	/// Adds or s a property of the global context.<br>
	/// All integer types other than int64_t are currently being converted to int64_t
	/// </summary>
	/// <param name="name">Name of the property</param>
	/// <param name="value">16-bit Integer value of the property</param>
	virtual ACTStatus SetContext(const std::string& name, int16_t value, PiiKind piiKind = PiiKind_None) { return SetContext(name, (int64_t)value, piiKind); }

	/// <summary>
	/// Adds or s a property of the global context.<br>
	/// All integer types other than int64_t are currently being converted to int64_t
	/// </summary>
	/// <param name="name">Name of the property</param>
	/// <param name="value">32-bit Integer value of the property</param>
	virtual  ACTStatus SetContext(const std::string& name, int32_t value, PiiKind piiKind = PiiKind_None) { return SetContext(name, (int64_t)value, piiKind); }

	/// <summary>
	/// Adds or s a property of the global context.<br>
	/// All integer types other than int64_t are currently being converted to int64_t
	/// </summary>
	/// <param name="name">Name of the property</param>
	/// <param name="value">8-bit unsigned integer value of the property</param>
	virtual  ACTStatus SetContext(const std::string& name, uint8_t  value, PiiKind piiKind = PiiKind_None) { return SetContext(name, (int64_t)value, piiKind); }

	/// <summary>
	/// Adds or s a property of the global context.<br>
	/// All integer types other than int64_t are currently being converted to int64_t
	/// </summary>
	/// <param name="name">Name of the property</param>
	/// <param name="value">16-bit unsigned integer value of the property</param>
	virtual  ACTStatus SetContext(const std::string& name, uint16_t value, PiiKind piiKind = PiiKind_None) { return SetContext(name, (int64_t)value, piiKind); }

	/// <summary>
	/// Adds or s a property of the global context.<br>
	/// All integer types other than int64_t are currently being converted to int64_t
	/// </summary>
	/// <param name="name">Name of the property</param>
	/// <param name="value">32-bit unsigned integer value of the property</param>
	virtual  ACTStatus SetContext(const std::string& name, uint32_t value, PiiKind piiKind = PiiKind_None) { return SetContext(name, (int64_t)value, piiKind); }

	/// <summary>
	/// Adds or s a property of the global context.<br>
	/// All integer types other than int64_t are currently being converted to int64_t
	/// </summary>
	/// <param name="name">Name of the property</param>
	/// <param name="value">64-bit unsigned integer value of the property</param>
	virtual  ACTStatus SetContext(const std::string& name, uint64_t value, PiiKind piiKind = PiiKind_None) { return SetContext(name, (int64_t)value, piiKind); }

	/// <summary>
	/// Adds or s a property of the global context.
	/// </summary>
	/// <param name="name">Name of the property</param>
	/// <param name="value">Boolean value of the property</param>
	virtual ACTStatus  SetContext(const std::string& name, bool value, PiiKind piiKind = PiiKind_None);

	/// <summary>
	/// Adds or s a property of the global context.
	/// </summary>
	/// <param name="name">Name of the property</param>
	/// <param name="value">.NET time ticks</param>
	virtual ACTStatus  SetContext(const std::string& name, time_ticks_t value, PiiKind piiKind = PiiKind_None);

	/// <summary>
	/// Adds or overrides a property of the global context.
	/// </summary>
	/// <param name="name">Name of the property</param>
	/// <param name="value">GUID</param>
	virtual ACTStatus  SetContext(const std::string& name, GUID_t value, PiiKind piiKind = PiiKind_None);

    /// <summary>
    /// Retrieves the ILogger interface of a Logger instance through which to log telemetry events.
    /// Also associates it with the specified experimentation project (e.g. ECS) for retrieving configuration context info.
    /// </summary>
    /// <param name="tenantToken">Token of the tenant with which the application is associated for collecting telemetry</param>
    /// <returns>Pointer to the ILogger interface of the logger instance</returns>
    virtual ILogger* GetLogger(std::string const& tenantToken);

    /// <summary>
    /// get Log controller.
    /// </summary>
    virtual ILogController* GetLogController();

    /// <summary>
    /// Get the Auth ticket controller.
    /// </summary>
    virtual  IAuthTokensController*  GetAuthTokensController();

  private:
      ARIASDK_LOG_DECL_COMPONENT_CLASS();
      std::mutex m_lock;
      std::map<std::string, ILogger*>         m_loggers;
      std::unique_ptr<ContextFieldsProvider>  m_context;
      ILogController*                         m_logController;
};


}}} // namespace Microsoft::Applications::Telemetry
