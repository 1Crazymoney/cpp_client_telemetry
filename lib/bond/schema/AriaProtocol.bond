namespace AriaProtocol

struct Ingest
{
    1: required int64 time;
    2: required string clientIp;
    3: optional int64 auth;
    4: optional int64 quality;
    5: optional int64 uploadTime;
    6: optional string userAgent;
	7: optional string client;
};

struct User
{
    1: optional string id;
    2: optional string localId;
    3: optional string authId;
};

struct Device
{
    1: optional string id;
    2: optional string localId;
    3: optional string authId;
    4: optional string authSecId;
    5: optional string deviceClass;
    6: optional string orgId;
    7: optional string orgAuthId;
};

struct Os
{
    1: optional string locale;
    2: optional string expId;
	3: optional int32 bootId;	
};

struct App
{
    1: optional string expId;
	2: optional string userId;
	3: optional string env;
	4: optional int32 asId;
};

struct Utc
{
    1: optional string stId;
    2: optional string aId;
    3: optional string raId;
    4: optional string op;
    5: optional int64 cat;
    6: optional int64 flags;
    7: optional string sqmId;
    8: optional vector<string> tickets;
	9: optional string mon;
	10: optional int32 cpId;
	11: optional string bSeq;
};

struct Protocol
{
    1: optional int32 metadataCrc;
    2: optional string ticketKey;
}

enum ValueKind
{
	ValueInt64 = 0,
	ValueUInt64 = 1,
	ValueInt32 = 2,
	ValueUInt32 = 3,
	ValueDouble = 4,
	ValueString = 5,
	ValueBool = 6,
	ValueDateTime = 7,
	ValueGuid = 8,
	ValueArrayInt64 = 9,
	ValueArrayUInt64 = 10,
	ValueArrayInt32 = 11,
	ValueArrayUInt32 = 12,
	ValueArrayDouble = 13,
	ValueArrayString = 14,
	ValueArrayBool = 15,
	ValueArrayDateTime = 16,
	ValueArrayGuid = 17
};

enum PIIKind
{
  NotSet = 0,
  DistinguishedName = 1,
  GenericData = 2,
  IPV4Address = 3,
  IPv6Address = 4,
  MailSubject = 5,
  PhoneNumber = 6,
  QueryString = 7,
  SipAddress = 8,
  SmtpAddress = 9,
  Identity = 10,
  Uri = 11,
  Fqdn = 12,
  IPV4AddressLegacy = 13
}

struct PII
{
  // Specifies what type of PII is being sent. 
  1: optional PIIKind Kind = NotSet;
}

enum CustomerContentKind
{
  NotSet = 0,
  GenericContent = 1
}

struct CustomerContent
{
  // Customer content type
  1: optional CustomerContentKind Kind = NotSet;
}

struct Attributes
{
	1: optional PII pii;
	2: optional CustomerContent customerContent;
}
struct Value
{
	1: optional ValueKind type = String;
	2: optional string stringValue;
	3: optional int64 longValue; // all integer types, data time, bool is represented here
	4: optional double doubleValue;
	5: optional vector<uint8> guidValue;
	10: optional vector<string> stringArray;
	11: optional vector<int64> longArray; // all vectors of integer types, data time, bool are represented here
	12: optional vector<double> doubleArray;
	13: optional vector<vector<int64>> guidArray;
};

struct Data
{
	// Key-Value map. It represents nested structs in flattened form (dot-delimited).
	1: optional map<string, Value> properties;
}

struct CommonSchemaEvent
{
    1: required string ver;
    2: required string name;
    3: required int64 time;
    4: optional double popSample;
    5: optional string epoch;
    6: optional int64 seqNum;
    7: optional string iKey;
    8: optional int64 flags;
    9: optional string os;
    10: optional string osVer;
    11: optional string appId;
    12: optional string appVer;
    13: optional string cV;
	14: optional Ingest extIngest;
	15: optional User extUser;
	16: optional Device extDevice;
	17: optional Os extOs;
	18: optional App expApp;
	19: optional Utc extUtc;
	20: optional Protocol extProtocol;
	21: optional Data ext;
    22: optional map<string, string> tags;
    50: optional string baseType;
	51: optional Data baseData;
	60: optional Data data;
};